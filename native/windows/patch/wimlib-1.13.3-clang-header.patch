--- wimlib-1.13.3/include/wimlib.h	2020-10-27 12:49:10.000000000 +0900
+++ wimlib-1.13.3-llvm/include/wimlib.h	2021-04-08 00:54:30.677851900 +0900
@@ -1,3 +1,5 @@
+#define WIMLIBAPI __declspec(dllexport)
+
 /**
  * @file wimlib.h
  * @brief External header for wimlib.
@@ -2624,7 +2626,7 @@
  * @retval ::WIMLIB_ERR_IMAGE_NAME_COLLISION
  *	The WIM already contains an image with the requested name.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_add_empty_image(WIMStruct *wim,
 		       const wimlib_tchar *name,
 		       int *new_idx_ret);
@@ -2680,7 +2682,7 @@
  * In addition, if ::WIMLIB_ADD_FLAG_VERBOSE is specified in @p add_flags, it
  * will receive ::WIMLIB_PROGRESS_MSG_SCAN_DENTRY.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_add_image(WIMStruct *wim,
 		 const wimlib_tchar *source,
 		 const wimlib_tchar *name,
@@ -2697,7 +2699,7 @@
  * same as wimlib_add_image().  See the documentation for <b>wimcapture</b> for
  * full details on how this mode works.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_add_image_multisource(WIMStruct *wim,
 			     const struct wimlib_capture_source *sources,
 			     size_t num_sources,
@@ -2714,7 +2716,7 @@
  * This just builds an appropriate ::wimlib_add_command and passes it to
  * wimlib_update_image().
  */
-extern int
+extern WIMLIBAPI int
 wimlib_add_tree(WIMStruct *wim, int image,
 		const wimlib_tchar *fs_source_path,
 		const wimlib_tchar *wim_target_path, int add_flags);
@@ -2747,7 +2749,7 @@
  * @retval ::WIMLIB_ERR_NOMEM
  *	Insufficient memory to allocate a new ::WIMStruct.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_create_new_wim(enum wimlib_compression_type ctype, WIMStruct **wim_ret);
 
 /**
@@ -2778,7 +2780,7 @@
  * If this function fails when @p image was ::WIMLIB_ALL_IMAGES, then it's
  * possible that some but not all of the images were deleted.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_delete_image(WIMStruct *wim, int image);
 
 /**
@@ -2789,7 +2791,7 @@
  * This just builds an appropriate ::wimlib_delete_command and passes it to
  * wimlib_update_image().
  */
-extern int
+extern WIMLIBAPI int
 wimlib_delete_path(WIMStruct *wim, int image,
 		   const wimlib_tchar *path, int delete_flags);
 
@@ -2861,7 +2863,7 @@
  * indicate failure (for different reasons) to read the metadata resource for an
  * image in @p src_wim that needed to be exported.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_export_image(WIMStruct *src_wim, int src_image,
 		    WIMStruct *dest_wim,
 		    const wimlib_tchar *dest_name,
@@ -2980,7 +2982,7 @@
  * ::WIMLIB_PROGRESS_MSG_EXTRACT_METADATA messages, then
  * ::WIMLIB_PROGRESS_MSG_EXTRACT_IMAGE_END.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_extract_image(WIMStruct *wim, int image,
 		     const wimlib_tchar *target, int extract_flags);
 
@@ -3022,7 +3024,7 @@
  * @retval ::WIMLIB_ERR_NOT_PIPABLE
  *	The WIM being piped over @p pipe_fd is a normal WIM, not a pipable WIM.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_extract_image_from_pipe(int pipe_fd,
 			       const wimlib_tchar *image_num_or_name,
 			       const wimlib_tchar *target, int extract_flags);
@@ -3036,7 +3038,7 @@
  * ::WIMLIB_PROGRESS_MSG_EXTRACT_STREAMS, in addition to
  * ::WIMLIB_PROGRESS_MSG_EXTRACT_SPWM_PART_BEGIN.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_extract_image_from_pipe_with_progress(int pipe_fd,
 					     const wimlib_tchar *image_num_or_name,
 					     const wimlib_tchar *target,
@@ -3063,7 +3065,7 @@
  * cannot read the path list file (e.g. ::WIMLIB_ERR_OPEN, ::WIMLIB_ERR_STAT,
  * ::WIMLIB_ERR_READ).
  */
-extern int
+extern WIMLIBAPI int
 wimlib_extract_pathlist(WIMStruct *wim, int image,
 			const wimlib_tchar *target,
 			const wimlib_tchar *path_list_file,
@@ -3138,7 +3140,7 @@
  * If a progress function is registered with @p wim, then it will receive
  * ::WIMLIB_PROGRESS_MSG_EXTRACT_STREAMS.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_extract_paths(WIMStruct *wim,
 		     int image,
 		     const wimlib_tchar *target,
@@ -3160,7 +3162,7 @@
  * @retval ::WIMLIB_ERR_WRITE
  *	Failed to write the data to the requested file.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_extract_xml_data(WIMStruct *wim, FILE *fp);
 
 /**
@@ -3175,6 +3177,7 @@
  * @param wim
  *	Pointer to the ::WIMStruct to release.  If @c NULL, no action is taken.
  */
+// extern WIMLIBAPI void
 extern void
 wimlib_free(WIMStruct *wim);
 
@@ -3191,7 +3194,7 @@
  *	"None", "LZX", or "XPRESS".  If the value was unrecognized, then
  *	the resulting string will be "Invalid".
  */
-extern const wimlib_tchar *
+extern WIMLIBAPI const wimlib_tchar *
 wimlib_get_compression_type_string(enum wimlib_compression_type ctype);
 
 /**
@@ -3207,7 +3210,7 @@
  *	the value was unrecognized, then the resulting string will be "Unknown
  *	error".
  */
-extern const wimlib_tchar *
+extern WIMLIBAPI const wimlib_tchar *
 wimlib_get_error_string(enum wimlib_error_code code);
 
 /**
@@ -3216,7 +3219,7 @@
  * Get the description of the specified image.  Equivalent to
  * <tt>wimlib_get_image_property(wim, image, "DESCRIPTION")</tt>.
  */
-extern const wimlib_tchar *
+extern WIMLIBAPI const wimlib_tchar *
 wimlib_get_image_description(const WIMStruct *wim, int image);
 
 /**
@@ -3227,7 +3230,7 @@
  * wimlib_get_image_name() will return an empty string if the image is unnamed
  * whereas wimlib_get_image_property() may return @c NULL in that case.
  */
-extern const wimlib_tchar *
+extern WIMLIBAPI const wimlib_tchar *
 wimlib_get_image_name(const WIMStruct *wim, int image);
 
 /**
@@ -3258,7 +3261,7 @@
  *	no such property.  The string may not remain valid after later library
  *	calls, so the caller should duplicate it if needed.
  */
-extern const wimlib_tchar *
+extern WIMLIBAPI const wimlib_tchar *
 wimlib_get_image_property(const WIMStruct *wim, int image,
 			  const wimlib_tchar *property_name);
 
@@ -3273,7 +3276,7 @@
  * 20) | (WIMLIB_MINOR_VERSION << 10) | WIMLIB_PATCH_VERSION)</c> for the
  * corresponding header file.
  */
-extern uint32_t
+extern WIMLIBAPI uint32_t
 wimlib_get_version(void);
 
 /**
@@ -3283,7 +3286,7 @@
  * PACKAGE_VERSION string that was set at build time.  (This allows a beta
  * release to be distinguished from an official release.)
  */
-extern const wimlib_tchar *
+extern WIMLIBAPI const wimlib_tchar *
 wimlib_get_version_string(void);
 
 /**
@@ -3300,7 +3303,7 @@
  *
  * @return 0
  */
-extern int
+extern WIMLIBAPI int
 wimlib_get_wim_info(WIMStruct *wim, struct wimlib_wim_info *info);
 
 /**
@@ -3330,7 +3333,7 @@
  * @retval ::WIMLIB_ERR_UNEXPECTED_END_OF_FILE
  *	Failed to read the XML document from the WIM file.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_get_xml_data(WIMStruct *wim, void **buf_ret, size_t *bufsize_ret);
 
 /**
@@ -3351,7 +3354,7 @@
  *	::WIMLIB_INIT_FLAG_STRICT_CAPTURE_PRIVILEGES were specified in @p
  *	init_flags, but the corresponding privileges could not be acquired.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_global_init(int init_flags);
 
 /**
@@ -3360,7 +3363,7 @@
  * Cleanup function for wimlib.  You are not required to call this function, but
  * it will release any global resources allocated by the library.
  */
-extern void
+extern WIMLIBAPI void
 wimlib_global_cleanup(void);
 
 /**
@@ -3379,7 +3382,7 @@
  *	if there is no image named @p name in @p wim.  If @p name is @c NULL or
  *	the empty string, then @c false is returned.
  */
-extern bool
+extern WIMLIBAPI bool
 wimlib_image_name_in_use(const WIMStruct *wim, const wimlib_tchar *name);
 
 /**
@@ -3426,7 +3429,7 @@
  * indicate failure (for different reasons) to read the metadata resource for an
  * image over which iteration needed to be done.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_iterate_dir_tree(WIMStruct *wim, int image, const wimlib_tchar *path,
 			int flags,
 			wimlib_iterate_dir_tree_callback_t cb, void *user_ctx);
@@ -3460,7 +3463,7 @@
  * @return 0 if all calls to @p cb returned 0; otherwise the first nonzero value
  * that was returned from @p cb.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_iterate_lookup_table(WIMStruct *wim, int flags,
 			    wimlib_iterate_lookup_table_callback_t cb,
 			    void *user_ctx);
@@ -3501,7 +3504,7 @@
  * an easy-to-use wrapper around this that has some advantages (e.g.  extra
  * sanity checks).
  */
-extern int
+extern WIMLIBAPI int
 wimlib_join(const wimlib_tchar * const *swms,
 	    unsigned num_swms,
 	    const wimlib_tchar *output_path,
@@ -3519,7 +3522,7 @@
  * ::WIMLIB_PROGRESS_MSG_VERIFY_INTEGRITY messages when each of the split WIM
  * parts is opened.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_join_with_progress(const wimlib_tchar * const *swms,
 			  unsigned num_swms,
 			  const wimlib_tchar *output_path,
@@ -3604,7 +3607,7 @@
  * To unmount the image, call wimlib_unmount_image().  This may be done in a
  * different process.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_mount_image(WIMStruct *wim,
 		   int image,
 		   const wimlib_tchar *dir,
@@ -3680,7 +3683,7 @@
  * @retval ::WIMLIB_ERR_XML
  *	The XML data of the WIM was invalid.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_open_wim(const wimlib_tchar *wim_file,
 		int open_flags,
 		WIMStruct **wim_ret);
@@ -3696,7 +3699,7 @@
  * progress function will receive ::WIMLIB_PROGRESS_MSG_VERIFY_INTEGRITY
  * messages while checking the WIM file's integrity.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_open_wim_with_progress(const wimlib_tchar *wim_file,
 			      int open_flags,
 			      WIMStruct **wim_ret,
@@ -3762,7 +3765,7 @@
  * ::WIMLIB_PROGRESS_MSG_WRITE_METADATA_BEGIN, and
  * ::WIMLIB_PROGRESS_MSG_WRITE_METADATA_END.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_overwrite(WIMStruct *wim, int write_flags, unsigned num_threads);
 
 /**
@@ -3785,7 +3788,7 @@
  * This function is deprecated; use wimlib_get_xml_data() or
  * wimlib_get_image_property() to query image information instead.
  */
-extern void
+extern WIMLIBAPI void
 wimlib_print_available_images(const WIMStruct *wim, int image);
 
 /**
@@ -3793,7 +3796,7 @@
  *
  * Print the header of the WIM file (intended for debugging only).
  */
-extern void
+extern WIMLIBAPI void
 wimlib_print_header(const WIMStruct *wim);
 
 /**
@@ -3837,7 +3840,7 @@
  * This function can additionally return most values that can be returned by
  * wimlib_open_wim().
  */
-extern int
+extern WIMLIBAPI int
 wimlib_reference_resource_files(WIMStruct *wim,
 				const wimlib_tchar * const *resource_wimfiles_or_globs,
 				unsigned count,
@@ -3864,7 +3867,7 @@
  *
  * @return 0 on success; a ::wimlib_error_code value on failure.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_reference_resources(WIMStruct *wim, WIMStruct **resource_wims,
 			   unsigned num_resource_wims, int ref_flags);
 
@@ -3930,7 +3933,7 @@
  * indicate failure (for different reasons) to read the metadata resource for
  * the template image.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_reference_template_image(WIMStruct *wim, int new_image,
 				WIMStruct *template_wim, int template_image,
 				int flags);
@@ -3950,7 +3953,7 @@
  *	The value which will be passed as the third argument to calls to @p
  *	progfunc.
  */
-extern void
+extern WIMLIBAPI void
 wimlib_register_progress_function(WIMStruct *wim,
 				  wimlib_progress_func_t progfunc,
 				  void *progctx);
@@ -3964,7 +3967,7 @@
  * This just builds an appropriate ::wimlib_rename_command and passes it to
  * wimlib_update_image().
  */
-extern int
+extern WIMLIBAPI int
 wimlib_rename_path(WIMStruct *wim, int image,
 		   const wimlib_tchar *source_path, const wimlib_tchar *dest_path);
 
@@ -3998,7 +4001,7 @@
  *	images, an unnamed image must be specified by index to eliminate the
  *	ambiguity.)
  */
-extern int
+extern WIMLIBAPI int
 wimlib_resolve_image(WIMStruct *wim,
 		     const wimlib_tchar *image_name_or_num);
 
@@ -4019,7 +4022,7 @@
  * @retval ::WIMLIB_ERR_UNSUPPORTED
  *	wimlib was compiled using the <c>--without-error-messages</c> option.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_error_file(FILE *fp);
 
 /**
@@ -4038,7 +4041,7 @@
  * @retval ::WIMLIB_ERR_UNSUPPORTED
  *	wimlib was compiled using the <c>--without-error-messages</c> option.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_error_file_by_name(const wimlib_tchar *path);
 
 /**
@@ -4049,7 +4052,7 @@
  *
  * Note that "description" is misspelled in the name of this function.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_image_descripton(WIMStruct *wim, int image,
 			    const wimlib_tchar *description);
 
@@ -4060,7 +4063,7 @@
  * (usually something like "Core" or "Ultimate").  Equivalent to
  * <tt>wimlib_set_image_property(wim, image, "FLAGS", flags)</tt>.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_image_flags(WIMStruct *wim, int image, const wimlib_tchar *flags);
 
 /**
@@ -4069,7 +4072,7 @@
  * Change the name of a WIM image.  Equivalent to
  * <tt>wimlib_set_image_property(wim, image, "NAME", name)</tt>.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_image_name(WIMStruct *wim, int image, const wimlib_tchar *name);
 
 /**
@@ -4109,7 +4112,7 @@
  *	@p property_name has an unsupported format, or @p property_name included
  *	a bracketed index that was too high.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_image_property(WIMStruct *wim, int image,
 			  const wimlib_tchar *property_name,
 			  const wimlib_tchar *property_value);
@@ -4142,7 +4145,7 @@
  *
  * @return 0
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_memory_allocator(void *(*malloc_func)(size_t),
 			    void (*free_func)(void *),
 			    void *(*realloc_func)(void *, size_t));
@@ -4172,7 +4175,7 @@
  *	@p chunk_size was not 0 or a supported chunk size for the currently
  *	selected output compression type.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_output_chunk_size(WIMStruct *wim, uint32_t chunk_size);
 
 /**
@@ -4181,7 +4184,7 @@
  * Similar to wimlib_set_output_chunk_size(), but set the chunk size for writing
  * solid resources.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_output_pack_chunk_size(WIMStruct *wim, uint32_t chunk_size);
 
 /**
@@ -4203,7 +4206,7 @@
  * @retval ::WIMLIB_ERR_INVALID_COMPRESSION_TYPE
  *	@p ctype did not specify a valid compression type.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_output_compression_type(WIMStruct *wim,
 				   enum wimlib_compression_type ctype);
 
@@ -4213,7 +4216,7 @@
  * Similar to wimlib_set_output_compression_type(), but set the compression type
  * for writing solid resources.  This cannot be ::WIMLIB_COMPRESSION_TYPE_NONE.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_output_pack_compression_type(WIMStruct *wim,
 					enum wimlib_compression_type ctype);
 
@@ -4239,7 +4242,7 @@
  * @retval ::WIMLIB_ERR_UNSUPPORTED
  *	wimlib was compiled using the <c>--without-error-messages</c> option.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_print_errors(bool show_messages);
 
 /**
@@ -4265,7 +4268,7 @@
  *	::wimlib_wim_info.boot_index did not specify 0 or a valid 1-based image
  *	index in the WIM.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_wim_info(WIMStruct *wim, const struct wimlib_wim_info *info,
 		    int which);
 
@@ -4307,7 +4310,7 @@
  * ::WIMLIB_PROGRESS_MSG_SPLIT_BEGIN_PART and
  * ::WIMLIB_PROGRESS_MSG_SPLIT_END_PART.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_split(WIMStruct *wim,
 	     const wimlib_tchar *swm_name,
 	     uint64_t part_size,
@@ -4350,7 +4353,7 @@
  * ::WIMLIB_PROGRESS_MSG_END_VERIFY_IMAGE, and
  * ::WIMLIB_PROGRESS_MSG_VERIFY_STREAMS.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_verify_wim(WIMStruct *wim, int verify_flags);
 
 /**
@@ -4386,7 +4389,7 @@
  * by using the @c umount or @c fusermount programs.  However, you need to call
  * this function if you want changes to be committed.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_unmount_image(const wimlib_tchar *dir, int unmount_flags);
 
 /**
@@ -4397,7 +4400,7 @@
  * message.  In addition, if changes are committed from a read-write mount, the
  * progress function will receive ::WIMLIB_PROGRESS_MSG_WRITE_STREAMS messages.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_unmount_image_with_progress(const wimlib_tchar *dir,
 				   int unmount_flags,
 				   wimlib_progress_func_t progfunc,
@@ -4493,7 +4496,7 @@
  * indicate failure (for different reasons) to read the metadata resource for an
  * image that needed to be updated.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_update_image(WIMStruct *wim,
 		    int image,
 		    const struct wimlib_update_command *cmds,
@@ -4561,7 +4564,7 @@
  * ::WIMLIB_PROGRESS_MSG_WRITE_METADATA_BEGIN, and
  * ::WIMLIB_PROGRESS_MSG_WRITE_METADATA_END.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_write(WIMStruct *wim,
 	     const wimlib_tchar *path,
 	     int image,
@@ -4588,7 +4591,7 @@
  *	@p fd was not seekable, but ::WIMLIB_WRITE_FLAG_PIPABLE was not
  *	specified in @p write_flags.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_write_to_fd(WIMStruct *wim,
 		   int fd,
 		   int image,
@@ -4646,7 +4649,7 @@
  * @retval ::WIMLIB_ERR_INVALID_COMPRESSION_TYPE
  *	@p ctype was neither a supported compression type nor -1.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_set_default_compression_level(int ctype, unsigned int compression_level);
 
 /**
@@ -4657,7 +4660,7 @@
  * compression type is invalid, or the @p max_block_size for that compression
  * type is invalid.
  */
-extern uint64_t
+extern WIMLIBAPI uint64_t
 wimlib_get_compressor_needed_memory(enum wimlib_compression_type ctype,
 				    size_t max_block_size,
 				    unsigned int compression_level);
@@ -4732,7 +4735,7 @@
  * @retval ::WIMLIB_ERR_NOMEM
  *	Insufficient memory to allocate the compressor.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_create_compressor(enum wimlib_compression_type ctype,
 			 size_t max_block_size,
 			 unsigned int compression_level,
@@ -4758,7 +4761,7 @@
  *	The size of the compressed data, in bytes, or 0 if the data could not be
  *	compressed to @p compressed_size_avail or fewer bytes.
  */
-extern size_t
+extern WIMLIBAPI size_t
 wimlib_compress(const void *uncompressed_data, size_t uncompressed_size,
 		void *compressed_data, size_t compressed_size_avail,
 		struct wimlib_compressor *compressor);
@@ -4769,7 +4772,7 @@
  * @param compressor
  *	The compressor to free.  If @c NULL, no action is taken.
  */
-extern void
+extern WIMLIBAPI void
 wimlib_free_compressor(struct wimlib_compressor *compressor);
 
 /**
@@ -4805,7 +4808,7 @@
  * @retval ::WIMLIB_ERR_NOMEM
  *	Insufficient memory to allocate the decompressor.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_create_decompressor(enum wimlib_compression_type ctype,
 			   size_t max_block_size,
 			   struct wimlib_decompressor **decompressor_ret);
@@ -4837,7 +4840,7 @@
  * as the @p uncompressed_size parameter.  If this is not done correctly,
  * decompression may fail or the data may be decompressed incorrectly.
  */
-extern int
+extern WIMLIBAPI int
 wimlib_decompress(const void *compressed_data, size_t compressed_size,
 		  void *uncompressed_data, size_t uncompressed_size,
 		  struct wimlib_decompressor *decompressor);
@@ -4848,7 +4851,7 @@
  * @param decompressor
  *	The decompressor to free.  If @c NULL, no action is taken.
  */
-extern void
+extern WIMLIBAPI void
 wimlib_free_decompressor(struct wimlib_decompressor *decompressor);
 
 
